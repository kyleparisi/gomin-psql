//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DjangoMigrations = newDjangoMigrationsTable("public", "django_migrations", "")

type djangoMigrationsTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	App     postgres.ColumnString
	Name    postgres.ColumnString
	Applied postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DjangoMigrationsTable struct {
	djangoMigrationsTable

	EXCLUDED djangoMigrationsTable
}

// AS creates new DjangoMigrationsTable with assigned alias
func (a DjangoMigrationsTable) AS(alias string) *DjangoMigrationsTable {
	return newDjangoMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DjangoMigrationsTable with assigned schema name
func (a DjangoMigrationsTable) FromSchema(schemaName string) *DjangoMigrationsTable {
	return newDjangoMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DjangoMigrationsTable with assigned table prefix
func (a DjangoMigrationsTable) WithPrefix(prefix string) *DjangoMigrationsTable {
	return newDjangoMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DjangoMigrationsTable with assigned table suffix
func (a DjangoMigrationsTable) WithSuffix(suffix string) *DjangoMigrationsTable {
	return newDjangoMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDjangoMigrationsTable(schemaName, tableName, alias string) *DjangoMigrationsTable {
	return &DjangoMigrationsTable{
		djangoMigrationsTable: newDjangoMigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newDjangoMigrationsTableImpl("", "excluded", ""),
	}
}

func newDjangoMigrationsTableImpl(schemaName, tableName, alias string) djangoMigrationsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		AppColumn      = postgres.StringColumn("app")
		NameColumn     = postgres.StringColumn("name")
		AppliedColumn  = postgres.TimestampzColumn("applied")
		allColumns     = postgres.ColumnList{IDColumn, AppColumn, NameColumn, AppliedColumn}
		mutableColumns = postgres.ColumnList{AppColumn, NameColumn, AppliedColumn}
	)

	return djangoMigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		App:     AppColumn,
		Name:    NameColumn,
		Applied: AppliedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
