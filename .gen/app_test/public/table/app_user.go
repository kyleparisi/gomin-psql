//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppUser = newAppUserTable("public", "app_user", "")

type appUserTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	Name      postgres.ColumnString
	Email     postgres.ColumnString
	Password  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppUserTable struct {
	appUserTable

	EXCLUDED appUserTable
}

// AS creates new AppUserTable with assigned alias
func (a AppUserTable) AS(alias string) *AppUserTable {
	return newAppUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppUserTable with assigned schema name
func (a AppUserTable) FromSchema(schemaName string) *AppUserTable {
	return newAppUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppUserTable with assigned table prefix
func (a AppUserTable) WithPrefix(prefix string) *AppUserTable {
	return newAppUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppUserTable with assigned table suffix
func (a AppUserTable) WithSuffix(suffix string) *AppUserTable {
	return newAppUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppUserTable(schemaName, tableName, alias string) *AppUserTable {
	return &AppUserTable{
		appUserTable: newAppUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAppUserTableImpl("", "excluded", ""),
	}
}

func newAppUserTableImpl(schemaName, tableName, alias string) appUserTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		NameColumn      = postgres.StringColumn("name")
		EmailColumn     = postgres.StringColumn("email")
		PasswordColumn  = postgres.StringColumn("password")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, PasswordColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, PasswordColumn}
	)

	return appUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Name:      NameColumn,
		Email:     EmailColumn,
		Password:  PasswordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
