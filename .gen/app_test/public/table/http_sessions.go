//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var HTTPSessions = newHTTPSessionsTable("public", "http_sessions", "")

type hTTPSessionsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	Key        postgres.ColumnString
	Data       postgres.ColumnString
	CreatedOn  postgres.ColumnTimestampz
	ModifiedOn postgres.ColumnTimestampz
	ExpiresOn  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type HTTPSessionsTable struct {
	hTTPSessionsTable

	EXCLUDED hTTPSessionsTable
}

// AS creates new HTTPSessionsTable with assigned alias
func (a HTTPSessionsTable) AS(alias string) *HTTPSessionsTable {
	return newHTTPSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HTTPSessionsTable with assigned schema name
func (a HTTPSessionsTable) FromSchema(schemaName string) *HTTPSessionsTable {
	return newHTTPSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HTTPSessionsTable with assigned table prefix
func (a HTTPSessionsTable) WithPrefix(prefix string) *HTTPSessionsTable {
	return newHTTPSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HTTPSessionsTable with assigned table suffix
func (a HTTPSessionsTable) WithSuffix(suffix string) *HTTPSessionsTable {
	return newHTTPSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHTTPSessionsTable(schemaName, tableName, alias string) *HTTPSessionsTable {
	return &HTTPSessionsTable{
		hTTPSessionsTable: newHTTPSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newHTTPSessionsTableImpl("", "excluded", ""),
	}
}

func newHTTPSessionsTableImpl(schemaName, tableName, alias string) hTTPSessionsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		KeyColumn        = postgres.StringColumn("key")
		DataColumn       = postgres.StringColumn("data")
		CreatedOnColumn  = postgres.TimestampzColumn("created_on")
		ModifiedOnColumn = postgres.TimestampzColumn("modified_on")
		ExpiresOnColumn  = postgres.TimestampzColumn("expires_on")
		allColumns       = postgres.ColumnList{IDColumn, KeyColumn, DataColumn, CreatedOnColumn, ModifiedOnColumn, ExpiresOnColumn}
		mutableColumns   = postgres.ColumnList{KeyColumn, DataColumn, CreatedOnColumn, ModifiedOnColumn, ExpiresOnColumn}
	)

	return hTTPSessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Key:        KeyColumn,
		Data:       DataColumn,
		CreatedOn:  CreatedOnColumn,
		ModifiedOn: ModifiedOnColumn,
		ExpiresOn:  ExpiresOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
